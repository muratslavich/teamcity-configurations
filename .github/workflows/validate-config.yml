name: TeamCity Configuration Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-config:
    name: Validate TeamCity Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Validate Kotlin DSL Syntax
      run: |
        echo "Validating TeamCity Kotlin DSL configuration..."
        
        # Check for basic syntax issues
        find .teamcity -name "*.kt" -exec echo "Checking: {}" \;
        find .teamcity -name "*.kts" -exec echo "Checking: {}" \;
        
        # Validate file structure
        echo "Validating file structure..."
        
        # Check required files exist
        if [ ! -f ".teamcity/settings.kts" ]; then
          echo "ERROR: Missing .teamcity/settings.kts"
          exit 1
        fi
        
        if [ ! -f ".teamcity/_Self/Project.kt" ]; then
          echo "ERROR: Missing .teamcity/_Self/Project.kt"
          exit 1
        fi
        
        echo "Basic validation passed"
        
    - name: Check Configuration Structure
      run: |
        echo "Checking project structure..."
        
        # List all projects
        echo "Found projects:"
        find .teamcity -maxdepth 1 -type d -not -name ".*" -not -name "_Self" | sort
        
        # Check each project has required files
        for project_dir in .teamcity/*/; do
          if [ -d "$project_dir" ] && [ "$(basename "$project_dir")" != "_Self" ]; then
            project_name=$(basename "$project_dir")
            echo "Validating project: $project_name"
            
            if [ ! -f "$project_dir/Project.kt" ]; then
              echo "WARNING: Missing Project.kt in $project_name"
            fi
            
            if [ -d "$project_dir/buildTypes" ]; then
              build_count=$(find "$project_dir/buildTypes" -name "*.kt" | wc -l)
              echo "  Build types: $build_count"
            fi
            
            if [ -d "$project_dir/vcsRoots" ]; then
              vcs_count=$(find "$project_dir/vcsRoots" -name "*.kt" | wc -l)
              echo "  VCS roots: $vcs_count"
            fi
          fi
        done
        
    - name: Validate Agent Requirements
      run: |
        echo "Validating agent requirements..."
        
        # Check for proper agent specifications
        echo "Checking agent requirements in build configurations..."
        
        # Java agent requirements
        java_builds=$(grep -r "java-build-agent" .teamcity/ || true)
        if [ ! -z "$java_builds" ]; then
          echo "Found Java build configurations"
        fi
        
        # Node.js agent requirements
        nodejs_builds=$(grep -r "nodejs-build-agent" .teamcity/ || true)
        if [ ! -z "$nodejs_builds" ]; then
          echo "Found Node.js build configurations"
        fi
        
        # Helm agent requirements
        helm_builds=$(grep -r "helm-deploy-agent" .teamcity/ || true)
        if [ ! -z "$helm_builds" ]; then
          echo "Found Helm deployment configurations"
        fi
        
        # Check for JDK-free requirements
        jdk_free_checks=$(grep -r "NO_JDK_AVAILABLE" .teamcity/ || true)
        if [ ! -z "$jdk_free_checks" ]; then
          echo "Found JDK-free agent configurations"
        fi
        
    - name: Security Check
      run: |
        echo "Performing security checks..."
        
        # Check for hardcoded secrets
        echo "Checking for potential hardcoded secrets..."
        
        # Check for common secret patterns
        if grep -r "password.*=" .teamcity/ | grep -v "credentialsJSON" | grep -v "password {"; then
          echo "WARNING: Potential hardcoded passwords found"
        fi
        
        if grep -r "token.*=" .teamcity/ | grep -v "credentialsJSON"; then
          echo "WARNING: Potential hardcoded tokens found"
        fi
        
        if grep -r "key.*=" .teamcity/ | grep -v "credentialsJSON"; then
          echo "WARNING: Potential hardcoded keys found"
        fi
        
        # Check for proper credential usage
        credential_usage=$(grep -r "credentialsJSON:" .teamcity/ || true)
        if [ ! -z "$credential_usage" ]; then
          echo "âœ“ Found proper credential usage with credentialsJSON"
        fi
        
        echo "Security check completed"
        
    - name: Generate Configuration Report
      run: |
        echo "Generating configuration report..."
        
        cat > config-report.md << 'EOF'
        # TeamCity Configuration Report
        
        ## Projects Overview
        EOF
        
        # Add project information
        for project_dir in .teamcity/*/; do
          if [ -d "$project_dir" ] && [ "$(basename "$project_dir")" != "_Self" ]; then
            project_name=$(basename "$project_dir")
            echo "### $project_name" >> config-report.md
            
            if [ -d "$project_dir/buildTypes" ]; then
              build_count=$(find "$project_dir/buildTypes" -name "*.kt" | wc -l)
              echo "- Build Types: $build_count" >> config-report.md
            fi
            
            if [ -d "$project_dir/vcsRoots" ]; then
              vcs_count=$(find "$project_dir/vcsRoots" -name "*.kt" | wc -l)
              echo "- VCS Roots: $vcs_count" >> config-report.md
            fi
            
            echo "" >> config-report.md
          fi
        done
        
        echo "Report generated: config-report.md"
        cat config-report.md
        
    - name: Upload Configuration Report
      uses: actions/upload-artifact@v3
      with:
        name: teamcity-config-report
        path: config-report.md
        retention-days: 30
